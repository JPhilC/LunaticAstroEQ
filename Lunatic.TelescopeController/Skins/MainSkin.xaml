<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!-- Default values for common controls -->
    <!-- Buttons -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="MinWidth" Value="80" />
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="SmallSquareButton">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="#FF531111" />
        <Setter Property="BorderBrush" Value="#FF290303" />
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="Button80">
        <Setter Property="Width" Value="80" />
    </Style>

    <!-- Menus -->
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="#FF4B0909" />
        <Setter Property="Foreground" Value="#FFEE0707" />
    </Style>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="#FF4B0909" />
        <Setter Property="Foreground" Value="#FFEE0707" />
    </Style>

    <!-- Textblock -->
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- Textblock Red LED Label -->
    <Style TargetType="{x:Type TextBlock}" x:Key="RedLEDLabel">
        <Setter Property="Foreground" Value="#FFFF0101" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="#FF420101" />
        <Setter Property="Padding" Value="4,2" />
    </Style>

    <!-- Textblock Red LED DataValue -->
    <Style TargetType="{x:Type TextBlock}" x:Key="RedLEDValue">
        <Setter Property="Foreground" Value="#FFFF0101" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="#FF840101" />
        <Setter Property="Padding" Value="4,2"/>
        <Setter Property="MinWidth" Value="80" />
    </Style>

    <!-- Textblock Red LED Label Large-->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource RedLEDLabel}" x:Key="RedLEDLabelLarge">
        <Setter Property="FontSize" Value="16" />
    </Style>

    <!-- Textblock Red LED DataValue -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource RedLEDValue}" x:Key="RedLEDValueLarge">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="MinWidth" Value="120" />
    </Style>

    <!-- Textblock Yellow LED DataValue -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource RedLEDValueLarge}" x:Key="YellowLEDValueLarge">
        <Setter Property="Foreground" Value="#FFFFD104" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource YellowLEDValueLarge}" x:Key="ParkedTextBlock">
        <Setter Property="FontSize" Value="38" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextBlock.RenderTransform">
        <Setter.Value>
            <TransformGroup>
                <ScaleTransform/>
                <SkewTransform/>
                <RotateTransform Angle="-30"/>
                <TranslateTransform/>
            </TransformGroup>
        </Setter.Value>
        </Setter>
        <Style.Resources>
            <Storyboard x:Key="FadeStoryboard">
                <DoubleAnimation Storyboard.TargetProperty="(TextBlock.Opacity)" 
                                From="0" To="1" Duration="0:0:0.5"
                                RepeatBehavior="Forever" AutoReverse="True"/>
            </Storyboard>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource FadeStoryboard}"/>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Textboxes -->
    <Style TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="ValueEntryTextBox">
        <Setter Property="Height" Value="22" />
        <Setter Property="MinWidth" Value="80" />
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxTiny">
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="30" />
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxShort">
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="80" />
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxLong">
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="200" />
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Textblock Red LED DataValue -->
    <Style TargetType="{x:Type TextBox}" x:Key="RedLEDValueTextBox" BasedOn="{StaticResource ValueEntryTextBox}">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Foreground" Value="#FFFF0101" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="#FF840101" />
        <Setter Property="Padding" Value="4,2"/>
    </Style>

    <!-- Checkbox -->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <!-- Radiobutton -->
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- Hyperlink like button -->
    <Style x:Key="HyperlinkLikeButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <ControlTemplate.Resources>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextDecorations" Value="Underline" />
                                </Style>
                            </ControlTemplate.Resources>
                            <ContentPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Group box -->
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FFA41515"/>
        <Setter Property="Foreground" Value="#FFA46A15" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Margin" Value="0,0,0,5" />
        <Setter Property="Padding" Value="4,2,4,2" />
    </Style>

    <!-- Window -->
    <Style TargetType="{x:Type Window}">
        <Setter Property="Icon" Value="pack://application:,,,/Lunatic.TelescopeController;component/Skins/Images/LunaticMoon.ico" />
        <Setter Property="Background" Value="Black" />
    </Style>

    <!-- Dialog box (Window) -->
    <Style TargetType="{x:Type Window}" x:Key="DialogStyle">
        <Setter Property="Icon" Value="pack://application:,,,/Lunatic.TelescopeController;component/Skins/Images/LunaticMoon.ico" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="WindowStyle" Value="SingleBorderWindow" />
        <Setter Property="ShowInTaskbar" Value="False" />
    </Style>

    <!-- Dialog box (Window) -->
    <!--
        <Setter Property="ShowInTaskbar" Value="False" />
    -->
    <Style TargetType="{x:Type Window}" x:Key="PropertyDialogStyle">
        <Setter Property="Icon" Value="pack://application:,,,/Lunatic.TelescopeController;component/Skins/Images/LunaticMoon.ico" />
        <Setter Property="Background" Value="Black" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="WindowStyle" Value="SingleBorderWindow" />
    </Style>


    <ControlTemplate x:Key="LunaticGroupBoxControlTemplate" TargetType="{x:Type GroupBox}">
        <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="6"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="6"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="6"/>
            </Grid.RowDefinitions>
            <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
            <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                <Border.OpacityMask>
                    <MultiBinding ConverterParameter="7" UpdateSourceTrigger="Default">
                        <MultiBinding.Converter>
                            <BorderGapMaskConverter/>
                        </MultiBinding.Converter>
                        <Binding ElementName="Header" Path="ActualWidth"/>
                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                    </MultiBinding>
                </Border.OpacityMask>
                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                    <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                </Border>
            </Border>
            <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <ContentPresenter Grid.ColumnSpan="2" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Grid>
    </ControlTemplate>
    
    <Style x:Key="LunaticMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="#FF4B0909" />
        <Setter Property="Foreground" Value="#FFEE0707" />
        <Setter Property="Template" Value="{DynamicResource MenuItemControlTemplate1}"/>
    </Style>
    
    <ControlTemplate x:Key="MenuItemControlTemplate1" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Path x:Name="GlyphPanel" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
                <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                    <Border x:Name="SubMenuBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <Rectangle Fill="Transparent" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="#3D26A0DA"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF26A0DA"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="#FF707070"/>
            </Trigger>
            <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="LunaticMenuControlTemplate" TargetType="{x:Type Menu}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="LunaticMenuControlTemplate2" TargetType="{x:Type Menu}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Border>
    </ControlTemplate>
    <ItemsPanelTemplate x:Key="ItemsPanelTemplate1">
        <StackPanel IsItemsHost="True"/>
    </ItemsPanelTemplate>


</ResourceDictionary>